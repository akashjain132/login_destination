<?php
// $Id: login_destination.module,v 1.10.2.23 2010/10/27 22:12:46 setfree Exp $

/**
 * @file
 * Control where users are directed to, once they login
 */

// Page constants
define('LOGIN_DESTINATION_REDIRECT_NOTLISTED', 0);
define('LOGIN_DESTINATION_REDIRECT_LISTED', 1);
define('LOGIN_DESTINATION_REDIRECT_PHP', 2);

// Destination constants
define('LOGIN_DESTINATION_STATIC', 0);
define('LOGIN_DESTINATION_SNIPPET', 1);

/**
 * Implement hook_help().
 */
function login_destination_help($path, $arg) {
  switch ($path) {
    case 'admin/help#login_destination':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Login Destination module allows you to customize the destination that the user is redirected to after logging in, registering to the site or using a one-time login link. The destination can be an internal page or an external URL. You may specify certain conditions like pages or user roles and make the destination depend upon them. You may also use a PHP snippets to provide custom conditions and destinations. Note that PHP Filter module has to be enabled and you have to be granted the "Use PHP for settings" permissions to be able to enter PHP code.') . '</p>';
      return $output;
    case 'admin/config/people/login-destination':
      return '<p>' . t('Login destination rules are evaluated each time a user logs in, registers to the site or uses a one-time login link. Each rule consists of the destination, path conditions and user roles conditions. First matching rule gets executed.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function login_destination_menu() {
  $items['admin/config/people/login-destination'] = array(
    'title' => 'Login destinations',
    'description' => 'Customize the destination that the user is redirected to after login.',
    'page callback' => 'login_destination_overview',
    'access arguments' => array('administer users'),
    'file' => 'login_destination.admin.inc',
    'weight' => 10,
  );
  $items['admin/config/people/login-destination/add'] = array(
    'title' => 'Add login destination rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('login_destination_edit_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1,
    'file' => 'login_destination.admin.inc',
  );
  $items['admin/config/people/login-destination/edit/%login_destination'] = array(
    'title' => 'Edit login destination rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('login_destination_edit_form', 5),
    'access arguments' => array('administer users'),
    'file' => 'login_destination.admin.inc',
  );
  $items['admin/config/people/login-destination/delete/%login_destination'] = array(
    'title' => 'Delete login destination rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('login_destination_delete_form', 5),
    'access arguments' => array('administer userson'),
    'file' => 'login_destination.admin.inc',
  );
  $items['admin/config/people/login-destination/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/people/login-destination/settings'] = array(
    'title' => 'Settings',
    'description' => 'Change Login Destination settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('login_destination_settings'),
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'login_destination.admin.inc',
    'weight' => 10,
  );
  
  return $items;
}

/**
 * Load a login destination.
 */
function login_destination_load($id) {
  $result = db_select('login_destination', 'l')
    ->fields('l')
    ->condition('id', $id)
    ->execute()
    ->fetchAssoc();

  $result['roles'] = unserialize($result['roles']);
  if (empty($result['roles'])) {
    $result['roles'] = array();
  }

  return $result;
}

/**
 * Implements hook_theme
 */
function login_destination_theme() {
  return array(
    'login_destination_destination' => array(
      'variables' => array('destination' => NULL),
      'file' => 'login_destination.admin.inc',
    ),
    'login_destination_pages' => array(
      'variables' => array('pages' => NULL, 'pages_type' => 0),
      'file' => 'login_destination.admin.inc',
    ),
    'login_destination_roles' => array(
      'variables' => array('roles' => NULL),
      'file' => 'login_destination.admin.inc',
    ),
  );
}

/**
 * Implements hook_form_alter
 */
function login_destination_form_alter(&$form, &$form_state, $form_id) {
  // We redirect by setting the $form_state['redirect'] variable. If we simply
  // call drupal_goto() it may break compability with other modules. If we set
  // the $_GET['destination'] variable we will loose the possibility to redirect
  // to an external URL.

  // Please note the the system_goto_action() calls drupal_goto() so it will
  // have priority over this module.
  
  // If we add the $form_state['redirect'] here it will be overriden by the
  // user_login_submit(). So we add a submit handler instead and will set the
  // redirect later. Our submit handler will be executed after the execution
  // of user_login_submit(). This is because form_submit() functions are
  // appended to form before hook_form_alter() is executed.

  // We will execute also after LoginToboggan's function as it replaces the
  // original submit function from user module.

  switch ($form_id) {
    case 'user_profile_form': // one-time login, password reset
      if (!isset($_GET['pass-reset-token']) && !variable_get('login_destination_profile_redirect', FALSE)) {
        // redirect only from user_pass_reset
        // You have to explicitally turn on the option to always redirect from
        // the profile page. This is for constistency.
        break;
      }
    case 'user_register_form': // user register page
    case 'user_login': // user login page
    case 'user_login_block': // user login block
    case 'user_login_custom': // for future use with custom login forms
      $form['#submit'][] = 'login_destination_submit';
      break;
  }
}

/**
 * Helper submit function.
 */
function login_destination_submit($form, &$form_state) {
  $path = $_GET['q'];
  // LoginToboggan's unified page is rendered dynamically. Fix it.
  switch ($form['#form_id']) {
    case 'user_register_form':
      if (drupal_match_path($path, 'user')) {
        $path = 'user/register';
      }
      break;
    case 'user_login':
      if (drupal_match_path($path, 'user/register')) {
        $path = 'user';
      }
      break;
  }

  $destination = login_destination_get_destination($path);

  if (!empty($destination)) {
    // Insert to redirect information to form
    $form_state['redirect'] = $destination;

    // check if we preserve the destination parameter
    if (!variable_get('login_destination_preserve_destination', FALSE)) {
      // Hack: The $_GET['destination'] from user_login_block overrides the
      // $form_state['redirect'] in drupal_goto(), so unset it.
      // More on this issue http://drupal.org/node/732542.
      unset($_GET['destination']);
    }
  }
}

/**
 * Match drupal path. This function is alias aware.
 */
function _login_destination_match_path($pages, $path = NULL) {
  $alias = drupal_strtolower(drupal_get_path_alias($path));

  $page_match = drupal_match_path($alias, $pages);

  if ($alias != $path) {
    $page_match = $page_match || drupal_match_path($path, $pages);
  }

  return $page_match;
}

/**
 * Implements hook_drupal_goto_alter
 */
function login_destination_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  global $user;

  // LoginToboggan takes over the email validation process be directing the user
  // to user/validate instead of user/reset. There is no form which we can alter
  // so the only possibility is to hook here.
  $validate_match = _login_destination_match_path('user/validate/*');

  // Note that this cannot be backported do 6.x as Drupal 6 does not call
  // drupal_alter for drupal_goto.

  if ($validate_match && $user->uid) {
    $destination = login_destination_get_destination();

    if (!empty($destination) && (!isset($_GET['destination']) || !variable_get('login_destination_preserve_destination', FALSE))) {
      // alter drupal_goto
      if (is_array($destination)) {
        $path = $destination[0];
        $options = $destination[1];
      }
      else {
        $path = $destination;
      }
    }
  }
}

/**
 * Process all destination rules and return destination path.
 * This function is intended to be used by external modules.
 */
function login_destination_get_destination($path = NULL) {
  // Get all the login destination rules from the database.
  $result = db_select('login_destination', 'l')
    //->addTag('translatable')
    ->fields('l', array('roles', 'pages_type', 'pages', 'destination_type', 'destination'))
    ->orderBy('weight')
    ->execute()
    ->fetchAll();

  if ($path == NULL) {
    $path = $_GET['q'];
  }
  // examine path matches
  foreach ($result as $data) {
    // try to match the subsequent rule
    if (_login_destination_should_redirect($data, $path)) {
      // Note: Matching rule with empty destination will break without
      // performing the actual redirect.
      return _login_destination_evaluate_destination($data);
    }
  }

  // no rule matched
  return '';
}

/**
 * Evaluate the code with forms context.
 *
 * This function hides the calling function's scope from eval().
 */
function _login_destination_eval($code) {
  // We could use the php_eval(), but would not be able get array return value.
  // We always check for the existance of PHP Filter module for security.
  return eval('?>' . $code);
}

/**
 * A helper function to provide role options
 */
function _login_destination_role_options() {
  // user role selection, without anonymous and authentificated user roles.
  $role_options = array_map('check_plain', user_roles(TRUE));
  unset($role_options[DRUPAL_AUTHENTICATED_RID]);
  return $role_options;
}

/**
 * A helper function to determine whether redirection should happen.
 *
 * @return bool TRUE - apply redirect, FALSE - not to apply redirect.
 */
function _login_destination_should_redirect($rule, $path = NULL) {

  global $user;

  $type = $rule->pages_type;
  $pages = drupal_strtolower($rule->pages);
  $roles = unserialize($rule->roles);

  // examine role matches
  if (empty($roles))
    $roles = array();

  // remove non-existent roles
  $roles = array_intersect_key(_login_destination_role_options(), $roles);
  $roles_intersect = array_intersect_key($roles, $user->roles);

  $role_match = (empty($roles) || !empty($roles_intersect));

  if ($type < LOGIN_DESTINATION_REDIRECT_PHP) {
    $alias = drupal_strtolower(drupal_get_path_alias($path));

    $page_match = drupal_match_path($alias, $pages);

    if ($alias != $path) {
      $page_match = $page_match || drupal_match_path($path, $pages);
    }
    $page_match = !($type xor $page_match);
  } 
  elseif (module_exists('php')) {
    // Do not execute php if the PHP Filter is off.
    $page_match = _login_destination_eval($pages);
  }
  else {
    $page_match = FALSE;
  }

  return ($page_match && $role_match);
}

/**
 * A helper function to evaluate destination path.
 * @global <type> $language
 * @param <type> $form
 * @param <type> $form_state
 * @param <type> $rule
 * @return string
 */
function _login_destination_evaluate_destination($rule) {
    $type = $rule->destination_type;
    $destination_str = $rule->destination;
    
    if ($type == LOGIN_DESTINATION_STATIC) {
      // take only 1st line
      if (preg_match("!^(.*?)$!", $destination_str, $matches) === 1 ) {
        $path = $matches[1];

        if (empty($path)) {
          // It is better not to use NULL as this may find its way into
          // drupal_goto.
          return '';
        }
        // External URL
        elseif (strpos($path, '://') !== FALSE) {
          return $path;
        }
        // Internal URL
        else {
          $destination = drupal_parse_url($path);
          $options = array();
          $options['query'] = $destination['query'];
          $options['fragment'] = $destination['fragment'];

          // drupal_goto cares about <front>
          return array($destination['path'], $options);
        }
      }
      else {
        // error - multiple lines
        return '';
      }
    }
    elseif (module_exists('php')) {
      // We cannot use the php_eval because we expect array here, but for the
      // matter of consistent UI we don't do it with the PHP Filter module off.
      return _login_destination_eval($destination_str);
    }
    else {
      // PHP code and PHP filter disabled.
      return '';
    }
}
